@page "/Product/{Id:int}"
@inject BakeryDbContext context
@inject ShoppingCartService shoppingCartService

 @rendermode InteractiveServer

<PageTitle>Produktinformation</PageTitle>

@if (ThisProduct == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage" />
}
else
{
    <br />

    <h3 class="mb-5">Produktinformation</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@ThisProduct.ImageURL" />
        </div>
        <div class="col-md-6">
            <h3>@ThisProduct.Name</h3>
            <p class="mb-4">@ThisProduct.Description</p>
            <p class="mb-4">
                <b>
                    @ThisProduct.Price.ToString("C")&nbsp;(@ThisProduct.Qty st i lager)
                </b>
            </p>
            <div>
                <AddToCartButton Product="ThisProduct"/>
            </div>
        </div>
    </div>
}

@code{
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public Product? ThisProduct { get; set; }

    public string? ErrorMessage { get; set; }


    protected override void OnInitialized()
    {
        ThisProduct = GetProductById(Id);
    }

    private Product GetProductById(int productId)
    {
        // Hämtar produkten från BakeryDbContext baserat på ID
        return context.Products.FirstOrDefault(p => p.Id == productId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await shoppingCartService.InitializeShoppingCart();
            StateHasChanged();
        }
    }
}