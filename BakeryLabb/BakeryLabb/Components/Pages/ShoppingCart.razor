@page "/ShoppingCart"
@using BakeryLabb.Data
@inject ShoppingCartService shoppingCartService
@inject NavigationManager navigationManager
@inject OrderService orderService
@rendermode InteractiveServer

<PageTitle>Varukorgen</PageTitle>

<br /> 

<h3>Din varukorg</h3>

<br />

<div>
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in ShoppingCartProducts)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>
                        @product.Qty
                        @* <input type="number" @bind="product.Qty" min="0" />
                        <button @onclick="() => UpdateQuantity_Click(product.Id, product.Qty)">Uppdatera kvantitet</button> *@
                    </td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@(product.Price * product.Qty)</td>
                    <td>
                        <button @onclick="() => RemoveProductFromCart_Click(product.Id)" class="btn btn-danger sm"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <b>Totalt: @shoppingCartService.GetTotal().ToString("C")</b>
</div>

<br />

<button class="btn btn-outline-secondary btn-sm" @onclick="ContinueShopping">Fortsätt handla</button>

<br /> <br /> <br />

<EditForm Model="@UserInformation" OnValidSubmit="SubmitOrder" FormName="PlaceOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-Value="UserInformation.FirstName" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.FirstName)" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" @bind-Value="UserInformation.LastName" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.LastName)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="UserInformation.Email" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.Email)" />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Phone number:</label>
        <InputText id="phoneNumber" @bind-Value="UserInformation.PhoneNumber" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label for="streetAddress">Street Address:</label>
        <InputText id="streetAddress" @bind-Value="UserInformation.Address" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.Address)" />
    </div>

    <div class="form-group">
        <label for="zipCode">Zip Code:</label>
        <InputText id="zipCode" @bind-Value="UserInformation.ZipCode" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.ZipCode)" />
    </div>

    <div class="form-group">
        <label for="city">City:</label>
        <InputText id="city" @bind-Value="UserInformation.City" class="form-control" />
        <ValidationMessage For="@(() => UserInformation.City)" />
    </div>


    <br />

    <button type="submit" class="btn btn-primary">Lägg order</button>
</EditForm>


@code{
    public UserInformation UserInformation { get; private set; } = new UserInformation();
    private List<ShoppingCartProduct> ShoppingCartProducts { get; set; } = new List<ShoppingCartProduct>();

    protected override void OnInitialized()
    {
        UserInformation = shoppingCartService.GetShippingAddress();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Hämta varukorgen från localStorage
            ShoppingCartProducts = await shoppingCartService.GetShoppingCartProducts();
            StateHasChanged();
        }
    }

    private async Task SubmitOrder()
    {
        orderService.SetOrderInfo(UserInformation);
        StateHasChanged();
        navigationManager.NavigateTo("/OrderConfirmation");
    }

    private async Task RemoveProductFromCart_Click(int productId)
    {
        await shoppingCartService.RemoveProductFromCart(productId);
        StateHasChanged();
    }

    //Försöker få Qty att stanna uppdaterad när jag ändrat antalet
    private async Task UpdateQuantity_Click(int productId, int newQuantity)
    {
        if (await shoppingCartService.UpdateQuantity(productId, newQuantity))
        {
            // Uppdatera det lokala tillståndet efter att kvantiteten har ändrats i varukorgen
            var productToUpdate = ShoppingCartProducts.FirstOrDefault(p => p.Id == productId);

            if (productToUpdate != null)
            {
                productToUpdate.Qty = newQuantity;
            }
        }
    }

    private void ContinueShopping()
    {
        navigationManager.NavigateTo("/");
    }
}