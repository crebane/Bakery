@rendermode InteractiveServer
@inject ShoppingCartService shoppingCartService

<div>
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@ProductInCart.Name</td>
                <td>
                    @* @ProductInCart.Qty *@
                    <input type="number" @bind="ProductInCart.Qty" min="0" />
                    @* <button @onclick="() => UpdateQuantity_Click(ProductInCart.Id, ProductInCart.Qty)">Uppdatera kvantitet</button> *@
                </td>
                <td>@ProductInCart.Price.ToString("C")</td>
                <td>@(ProductInCart.Price * ProductInCart.Qty)</td>
                <td>
                    <button @onclick="() => RemoveProductFromCart_Click(ProductInCart.Id)">Ta bort</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    <p>Totalt:</p>
    <b>@shoppingCartService.GetTotal().ToString("C")</b>
</div>


@code {
    [Parameter]
    public ShoppingCartProduct ProductInCart { get; set; }

    public string? ErrorMessage { get; set; }
    protected string? TotalPrice { get; set; }
    protected int TotalQuantity { get; set; }

    // //Försöker kunna ta bort enskild bara från varukorgen
    private async Task RemoveProductFromCart_Click(int productId)
    {
        await shoppingCartService.RemoveProductFromCart(productId);
        StateHasChanged();
    }

    // private async Task UpdateQuantity_Click(int productId, int newQuantity)
    // {
    //     if (await shoppingCartService.UpdateQuantity(productId, newQuantity))
    //     {
    //         // Uppdatera det lokala tillståndet efter att kvantiteten har ändrats i varukorgen
    //         var productToUpdate = ProductInCart.FirstOrDefault(p => p.Id == productId);

    //         if (productToUpdate != null)
    //         {
    //             productToUpdate.Qty = newQuantity;
    //         }
    //     }
    // }
}
